package com.park.cloudcore.service.order.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.park.base.common.DataChangeTools;
import com.park.base.common.ResultTools;
import com.park.cloudcore.common.PublicHandleTools;
import com.park.cloudcore.common.ValidateParamsTools;
import com.park.cloudcore.common.constants.Code;
import com.park.cloudcore.common.constants.ValidateType;
import com.park.cloudcore.dao.order.OrderEnExRecordDao;
import com.park.cloudcore.domain.order.OrderEnExRecordDomain;
import com.park.cloudcore.service.order.OrderEnExRecordService;

/**
 * @author fangct on 20171129
 */
@Repository(value = "orderEnExRecordServiceImpl")
public class OrderEnExRecordServiceImpl implements OrderEnExRecordService {

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private OrderEnExRecordDao orderEnExRecordDao;

	public String addOrderEnExRecord(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			// 校验参数
			String[] mustParams = { "recordType", "orderNum", "parkId" };
			if (!ValidateParamsTools.vaildateParams(paramMap, mustParams, ValidateType.必传)) {
				return ResultTools.setResponse(Code.ERROR_400, Code.getName(Code.ERROR_400));
			}
			int result = orderEnExRecordDao.insertOrderEnExRecord(paramMap);
			boolean success = PublicHandleTools.operDbResult(result, "新增进出场记录", paramMap.get("orderNum"));
			// 保存失败
			if (!success)
				return ResultTools.setResponse(Code.ERROR_405, Code.getName(Code.ERROR_405));
			return ResultTools.setResponse(Code.SUCCESS, Code.getName(Code.SUCCESS));
		} catch (Exception e) {
			logger.info("** 新增进出场记录 - 保存出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

	public String findOrderEnExRecords(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			
			// 分页参数初始化
			PublicHandleTools.paging(paramMap);
			List<OrderEnExRecordDomain> orderEnExRecordList = orderEnExRecordDao.selectOrderEnExRecords(paramMap);
			if (orderEnExRecordList == null || orderEnExRecordList.size() == 0)
				return ResultTools.setResponse(Code.ERROR_404, Code.getName(Code.ERROR_404));
			return ResultTools.setObjectResponse(Code.SUCCESS, Code.getName(Code.SUCCESS), orderEnExRecordList);
		} catch (Exception e) {
			logger.info("** 查询进出场记录列表 - 查询出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

	public String modOrderEnExRecord(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			// 校验参数
			String[] mustParams = { "parkId", "orderNum", "plateNumber" };
			if (!ValidateParamsTools.vaildateParams(paramMap, mustParams, ValidateType.必传)) {
				return ResultTools.setResponse(Code.ERROR_400, Code.getName(Code.ERROR_400));
			}
			int result = orderEnExRecordDao.updateOrderEnExRecord(paramMap);
			boolean success = PublicHandleTools.operDbResult(result, "修改进出场记录", paramMap.get("orderNum"));
			// 修改失败
			if (!success)
				return ResultTools.setResponse(Code.ERROR_404, Code.getName(Code.ERROR_404));
			// 修改成功，返回正常数据
			Map<String, String> resultMap = new HashMap<String, String>();
			resultMap.put("orderNum", paramMap.get("orderNum"));
			return ResultTools.setObjectResponse(Code.SUCCESS, Code.getName(Code.SUCCESS), resultMap);
		} catch (Exception e) {
			logger.info("** 修改进出场记录 - 修改出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

}
