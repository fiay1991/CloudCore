package com.park.cloudcore.service.order.impl;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.park.base.common.DataChangeTools;
import com.park.base.common.RandomTools;
import com.park.base.common.ResultTools;
import com.park.cloudcore.common.PublicHandleTools;
import com.park.cloudcore.common.ValidateParamsTools;
import com.park.cloudcore.common.constants.Code;
import com.park.cloudcore.common.constants.ValidateType;
import com.park.cloudcore.dao.order.OrderPayRecordDao;
import com.park.cloudcore.domain.order.OrderPayRecordDomain;
import com.park.cloudcore.service.order.OrderPayRecordService;

/**
 * 支付记录
 * @author fangct on 20171129
 *
 */
@Repository(value = "orderPayRecordServiceImpl")
public class OrderPayRecordServiceImpl implements OrderPayRecordService {

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private OrderPayRecordDao orderPayRecordDao;

	public String addOrderPayRecord(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			// 校验参数
			String[] mustParams = { "parkId", "orderNum", "costBefore", "costAfter", "payStatus" };
			if (!ValidateParamsTools.vaildateParams(paramMap, mustParams, ValidateType.必传)) {
				return ResultTools.setResponse(Code.ERROR_400, Code.getName(Code.ERROR_400));
			}
			// 校验交易流水号是否为空，若空，则自动生成
			String tradeNo = paramMap.get("tradeNo");
			if (null == tradeNo || "".equals(tradeNo)) {
				tradeNo = RandomTools.GenerateOrderNum();
				paramMap.put("tradeNo", tradeNo);
			}
			int result = orderPayRecordDao.insertOrderPayRecord(paramMap);
			boolean success = PublicHandleTools.operDbResult(result, "新增交易流水", paramMap.toString());
			// 保存失败
			if (!success) {
				return ResultTools.setResponse(Code.ERROR_405, Code.getName(Code.ERROR_405));
			}
			// 返回正常数据
			Map<String, String> resultMap = new HashMap<String, String>();
			resultMap.put("orderNum", paramMap.get("orderNum"));
			resultMap.put("tradeNo", tradeNo);
			return ResultTools.setObjectResponse(Code.SUCCESS, Code.getName(Code.SUCCESS), resultMap);
		} catch (Exception e) {
			logger.info("** 新增交易流水 - 保存出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

	public String modBase(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			// 校验参数
			String[] mustParams = { "tradeNo", "payTime" };
			if (!ValidateParamsTools.vaildateParams(paramMap, mustParams, ValidateType.必传)) {
				return ResultTools.setResponse(Code.ERROR_400, Code.getName(Code.ERROR_400));
			}

			String tradeNo = paramMap.get("tradeNo");
			int result = orderPayRecordDao.updateOrderPayRecord(paramMap);
			boolean success = PublicHandleTools.operDbResult(result, "修改交易流水基本信息", tradeNo);
			// 保存失败
			if (!success) 
				return ResultTools.setResponse(Code.ERROR_404, Code.getName(Code.ERROR_404));
			return ResultTools.setResponse(Code.SUCCESS, Code.getName(Code.SUCCESS));
		} catch (Exception e) {
			logger.info("** 修改交易流水基本信息 - 修改出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

	public String modStatus(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			// 校验参数
			String[] anyoneParams = { "tradeNo", "orderNum" };
			String[] mustParams = { "newPayStatus" };
			if (!ValidateParamsTools.vaildateParams(paramMap, anyoneParams, ValidateType.任一必传)
					|| !ValidateParamsTools.vaildateParams(paramMap, mustParams, ValidateType.必传)) {
				return ResultTools.setResponse(Code.ERROR_400, Code.getName(Code.ERROR_400));
			}

			String tradeNo = paramMap.get("tradeNo");
			String orderNum = paramMap.get("orderNum");
			int result = orderPayRecordDao.updateOrderPayRecord(paramMap);
			boolean success = PublicHandleTools.operDbResult(result, "修改交易流水状态", tradeNo + "," + orderNum);
			if (!success) 
				return ResultTools.setResponse(Code.ERROR_404, Code.getName(Code.ERROR_404));
			return ResultTools.setResponse(Code.SUCCESS, Code.getName(Code.SUCCESS));
		} catch (Exception e) {
			logger.info("** 修改交易流水 - 修改出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

	public String findOrderPayRecord(String params) {
		try {
			Map<String, String> paramMap = DataChangeTools.json2Map(params);
			// 校验参数
			String[] anyoneParams = { "id", "tradeNo" };
			if (!ValidateParamsTools.vaildateParams(paramMap, anyoneParams, ValidateType.任一必传)) {
				return ResultTools.setResponse(Code.ERROR_400, Code.getName(Code.ERROR_400));
			}
			OrderPayRecordDomain orderPayRecord = orderPayRecordDao.selectOrderPayRecord(paramMap);
			if (null == orderPayRecord) 
		        return ResultTools.setResponse(Code.ERROR_404, Code.getName(Code.ERROR_404));
			return ResultTools.setObjectResponse(Code.SUCCESS, Code.getName(Code.SUCCESS), orderPayRecord);
		} catch (Exception e) {
			logger.info("** 查询交易流水 - 查询出现异常：" + e.getMessage());
			e.printStackTrace();
			return ResultTools.setResponse(Code.ERROR, Code.getName(Code.ERROR));
		}
	}

	public String sumOrderPayRecord(String params) {
		Map<String, String> paramMap = DataChangeTools.json2Map(params);
		Map<String, String> resultMap = orderPayRecordDao.sumOrderPayRecord(paramMap);
		if (resultMap == null || resultMap.size() == 0) 
			return ResultTools.setResponse(Code.ERROR_404, Code.getName(Code.ERROR_404));
		return ResultTools.setObjectResponse(Code.SUCCESS, Code.getName(Code.SUCCESS), resultMap);
	}

}
